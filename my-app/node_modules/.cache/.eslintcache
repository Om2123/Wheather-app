[{"C:\\Users\\Dell\\Desktop\\weather-app\\my-app\\src\\index.js":"1","C:\\Users\\Dell\\Desktop\\weather-app\\my-app\\src\\App.js":"2","C:\\Users\\Dell\\Desktop\\weather-app\\my-app\\src\\reportWebVitals.js":"3","C:\\Users\\Dell\\Desktop\\weather-app\\my-app\\src\\compo\\Home.jsx":"4","C:\\Users\\Dell\\Desktop\\weather-app\\my-app\\src\\compo\\WeatherApi.jsx":"5","C:\\Users\\Dell\\Desktop\\weather-app\\my-app\\src\\context\\Myprovider.jsx":"6","C:\\Users\\Dell\\Desktop\\weather-app\\my-app\\src\\context\\Mycontext.jsx":"7"},{"size":558,"mtime":1682228116256,"results":"8","hashOfConfig":"9"},{"size":490,"mtime":1682301907989,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1682206224148,"results":"11","hashOfConfig":"9"},{"size":2779,"mtime":1682303956109,"results":"12","hashOfConfig":"9"},{"size":4406,"mtime":1682302918189,"results":"13","hashOfConfig":"9"},{"size":440,"mtime":1682302069490,"results":"14","hashOfConfig":"9"},{"size":122,"mtime":1682301815530,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"smsj6j",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"19"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"19"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"C:\\Users\\Dell\\Desktop\\weather-app\\my-app\\src\\index.js",[],[],[],"C:\\Users\\Dell\\Desktop\\weather-app\\my-app\\src\\App.js",[],[],"C:\\Users\\Dell\\Desktop\\weather-app\\my-app\\src\\reportWebVitals.js",[],[],"C:\\Users\\Dell\\Desktop\\weather-app\\my-app\\src\\compo\\Home.jsx",[],[],"C:\\Users\\Dell\\Desktop\\weather-app\\my-app\\src\\compo\\WeatherApi.jsx",["40","41"],[],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { css } from '@emotion/react';\r\nimport { RingLoader } from 'react-spinners';\r\nimport { Link } from 'react-router-dom';\r\nimport Mycontext from '../context/Mycontext';\r\n\r\nconst WeatherApi = () => {\r\n    const [weatherData, setWeatherData] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const { city } = useContext(Mycontext);\r\n\r\n    useEffect(() => {\r\n        const fetchWeatherData = async () => {\r\n            try {\r\n                // Replace {API key} with your actual OpenWeatherMap API key\r\n                const apiKey = '09b8e023b1a6da1f4251f2149fc8d14a';\r\n                const apkey = '33673353c58ee88f3119771df82a2f85';\r\n                const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apkey}`);\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch weather data');\r\n                }\r\n                const data = await response.json();\r\n                setWeatherData(data);\r\n            } catch (error) {\r\n                console.error(error);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        fetchWeatherData();\r\n    }, []);\r\n    const override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n`;\r\n\r\n    if (isLoading) {\r\n        // Show the spinner while data is being fetched\r\n        return (\r\n            <div className=\"flex justify-center items-center h-screen\">\r\n                <RingLoader color=\"blue\" size={15} css={override} /> {/* Use RingLoader component from react-spinners */}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!weatherData) {\r\n        return <div>Error: Failed to fetch weather data</div>; // Show error message if failed to fetch data\r\n    }\r\nconsole.log(weatherData);\r\n    return (\r\n        <div className=\"h-screen flex items-center justify-center shadow-lg\">\r\n            <div className=\"border border-blue-300 p-8 rounded-lg bg-blue-400 max-w-md w-full shadow-custom rounded transform scale-90 shadow-lg\">\r\n                <h1 className=\"text-2xl font-semibold text-white mb-6 border-gray-300 pb-5\" style={{ borderBottomWidth: '2px', borderBottomStyle: 'solid' }}>\r\n                    <span className='pr-2 w-16 h-16'>\r\n                        <Link to=\"/\">\r\n                            <ion-icon name=\"arrow-back-sharp\" className=\"w-8 h-8\"></ion-icon>\r\n\r\n                        </Link>\r\n\r\n                    </span>\r\n\r\n\r\n\r\n                    Weather App\r\n                </h1>\r\n                <div className=\"flex items-center flex-col mb-8 h-80\"> {/* Increased height to h-32 */}\r\n                    <ion-icon name=\"partly-sunny-outline \" className=\"bg-white-500\"></ion-icon>\r\n                    <h2 className=\"text-6xl font-bold text-white p-2\" >{weatherData.main.temp}&deg;C</h2>\r\n                    <span className=\"text-2xl text-white ml-2 mt-5\">  {weatherData.base}</span>\r\n\r\n                    <span className=\"text-2xl text-white ml-2 mt-5\">  {weatherData.name}, {weatherData.sys.country}</span>\r\n                </div>\r\n                {/*  edit here */}\r\n                <div className=\"flex justify-evenly divide-x\">\r\n                    <div className=\"w-1/2 text-white border-t border-gray-300 pt-4\">\r\n                        <p className=\"text-center text-3xl\" style={{ fontSize: '20px', height: \"25px\" }}>{weatherData.main.feels_like}&deg;C</p>\r\n                        <h3 className=\"text-xl font-semibold text-center\" style={{ fontSize: '16px', height: \"25px\" }}        >\r\n                            <ion-icon name=\"thermometer-outline\" className=\"bg-white-100 h-12 w-12 mt-2\"></ion-icon>\r\n                            Feels Like\r\n                        </h3>\r\n                    </div>\r\n                    <div className=\"w-1/2 text-white border-t border-gray-300 pt-4\">\r\n                        <p className=\"text-2xl text-center\" style={{ fontSize: '20px', height: \"25px\" }}>{weatherData.main.humidity}%</p>\r\n                        <h3 className=\"text-xl font-semibold text-center\" style={{ fontSize: '16px', height: \"25px\" }}>\r\n                            <ion-icon name=\"water-outline\"></ion-icon>\r\n                            Humidity</h3>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherApi;\r\n","C:\\Users\\Dell\\Desktop\\weather-app\\my-app\\src\\context\\Myprovider.jsx",["42"],[],"// MyContextProvider.js\r\nimport React, { useState } from 'react';\r\nimport Mycontext from './Mycontext';\r\n\r\nconst MyContextProvider = ({ children }) => {\r\n  const [city, setCity] = useState(\"mumbai\");\r\n\r\n  // Functions to update the state\r\n  const updateState = () => {\r\n    \r\n  };\r\n\r\n  return (\r\n    <Mycontext.Provider value={{ city, setCity }}>\r\n      {children}\r\n    </Mycontext.Provider>\r\n  );\r\n};\r\n\r\nexport default MyContextProvider;\r\n","C:\\Users\\Dell\\Desktop\\weather-app\\my-app\\src\\context\\Mycontext.jsx",[],[],{"ruleId":"43","severity":1,"message":"44","line":16,"column":23,"nodeType":"45","messageId":"46","endLine":16,"endColumn":29},{"ruleId":"47","severity":1,"message":"48","line":31,"column":8,"nodeType":"49","endLine":31,"endColumn":10,"suggestions":"50"},{"ruleId":"43","severity":1,"message":"51","line":9,"column":9,"nodeType":"45","messageId":"46","endLine":9,"endColumn":20},"no-unused-vars","'apiKey' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'city'. Either include it or remove the dependency array.","ArrayExpression",["52"],"'updateState' is assigned a value but never used.",{"desc":"53","fix":"54"},"Update the dependencies array to be: [city]",{"range":"55","text":"56"},[1283,1285],"[city]"]